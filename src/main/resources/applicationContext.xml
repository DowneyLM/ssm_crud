<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

       <context:component-scan base-package="cn.avengers">
              <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
       </context:component-scan>

       <!-- Spring的配置文件，这里主要配置和业务逻辑有关的 -->
       <!--=================== 数据源，事务控制，xxx ================-->

       <!-- context:property-placeholder location=引入外部资源配置文件 -->
       <context:property-placeholder location="classpath:dbconfig.properties" />

       <!-- 编辑xml文件时，
       注释：   CTRL + SHIFT + /
       取消注释：CTRL + SHIFT + \
       写完一行快速移动到下一行空行：shift+enter
       -->
       <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
              <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
              <property name="driverClass" value="${jdbc.driverClass}"></property>
              <property name="user" value="${jdbc.user}"></property>
              <property name="password" value="${jdbc.password}"></property>
       </bean>


       <!--================== 配置和MyBatis的整合=============== -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
              <!--指定mybatis全局配置文件的位置-->
              <property name="configLocation" value="classpath:mybatis-config.xml"></property>
              <property name="dataSource" ref="pooledDataSource"></property>
              <!--指定mybatis mapper文件的位置-->
              <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
       </bean>

       <!--配置扫描器，将mybatis接口的实现加入到ioc容器中-->
       <!-- MapperFactoryBean 创建的代理类实现了 UserMapper 接口,并且注入到应用程序中。
            因为代理创建在运行时环境中(Runtime,译者注) ,那么指定的映射器必须是一个接口,而 不是一个具体的实现类。
            上面的配置有一个很大的缺点，就是系统有很多的配置文件时 全部需要手动编写，所以上述的方式已经很用了。
            没有必要在 Spring 的 XML 配置文件中注册所有的映射器。相反,你可以使用一个 MapperScannerConfigurer ,
            它 将 会 查 找 类 路 径 下 的 映 射 器 并 自 动 将 它 们 创 建 成 MapperFactoryBean。
        -->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <!--扫描所有dao接口实现，假如到ioc容器中-->
              <property name="basePackage" value="cn.avengers.crud.dao"></property>
       </bean>

       <!-- 配置一个可以执行批量的sqlSession -->
       <bean id="sqlSesson" class="org.mybatis.spring.SqlSessionTemplate">
              <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
              <constructor-arg name="executorType" value="BATCH"></constructor-arg>
       </bean>


       <!-- ===============事务控制的配置 ================-->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <!--控制数据源-->
              <property name="dataSource" ref="pooledDataSource"></property>
       </bean>

       <!--开启基于注解的事务，使用xml配置形式的事务（必要时主要都是使用配置式）-->
       <aop:config>
              <!--切入点表达式-->
              <aop:pointcut id="txPoint" expression="execution(* cn.avengers.crud.service..*(..))"/>
              <!--配置事务增强-->
              <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint" />
       </aop:config>

       <!--配置事务增强，事务如何切入  -->
       <tx:advice id="txAdvice" transaction-manager="transactionManager">
              <tx:attributes>
                     <!-- 所有方法都是事务方法 -->
                     <tx:method name="*"/>
                     <!--以get开始的所有方法  -->
                     <tx:method name="get*" read-only="true"/>
              </tx:attributes>
       </tx:advice>

</beans>